/* Generated By:JavaCC: Do not edit this line. CircuitParser.java */
  package GCParser;
  import java.util.*;
  import java.math.BigInteger;
  import YaoGC.State;
  import GCParser.Operation.*;
  import java.io.*;

  public class CircuitParser implements CircuitParserConstants {

    private Variable_Context context;

    private int major_version;
    private int minor_version;

    private int lineNumber;
    private boolean errors;
    private int partyComp = Input_Variable.ALL;
    private File file = null;
    private boolean included = false;
    private Set<File> ancestorIncludes = new TreeSet<File>();

    private CircuitParser( File readFrom, InputStream io ) {
      this( io );
      file = readFrom;
    }
    private CircuitParser( InputStream io, File readFrom, CircuitParser p ) throws IOException {
      this( readFrom, io );
      partyComp = p.partyComp;
      included = true;
      ancestorIncludes.addAll( p.ancestorIncludes );
      ancestorIncludes.add(readFrom.getCanonicalFile());
    }
    public static Variable_Context read( File readFrom ) throws CircuitDescriptionException, FileNotFoundException, IOException {
      FileInputStream io = new FileInputStream(readFrom);
      CircuitParser p = new CircuitParser( readFrom, io );
      Variable_Context ans = p.read();
      io.close();
      return ans;
    }

    public Variable_Context read() throws CircuitDescriptionException {
      context = new Variable_Context();
      lineNumber = 1;
      errors = false;
      try {
        GarbledCircuit();
      } catch ( CircuitDescriptionException e ){
        log(e);
      } catch ( ParseException e ){
        log(e);
      } catch ( FileNotFoundException e ){
        log(e);
      } catch (TokenMgrError e ){
        log(e);
      } catch( IOException e ){
        log(e);
      }
      if( errors ){
        throw new CircuitDescriptionException("Error reading circuit description");
      }
      return context;
    }
    private Variable getVar( String name ){
      return context.get(name);
    }
    private void putVar( Variable v ) {
      try{
        context.putVar(v);
      } catch ( CircuitDescriptionException e ){
        log( e );
      }
    }
    private void log( Exception e ){
      System.out.println( e.getMessage() + " on line "+lineNumber+" in file "+file.getName());
      errors = true;
    }
    private void log( TokenMgrError e ){
      System.out.println( e.getMessage() + " on line "+lineNumber+" in file "+file.getName());
      errors = true;
    }
    private void log( CircuitDescriptionException e ){
      System.out.println( e.getMessage() + " in file "+file.getName());
      errors = true;
    }

    private boolean isCircularInclude( File other ) throws IOException {
      return ancestorIncludes.contains(other.getCanonicalFile());
    }
    private void includeFile( String fname, Map<String,Variable> inMap, Map<String,String> outMap ) throws CircuitDescriptionException, FileNotFoundException, IOException {
      File includeFile = new File( fname );
      if( !includeFile.isAbsolute() ){
        if( file == null )
          throw new CircuitDescriptionException("Cannot include relative path when parser is not initialized with File",lineNumber);
        includeFile = new File( file.getParentFile(), fname );
      }
      if( isCircularInclude(includeFile) ){
        throw new CircuitDescriptionException("Circular include detected when including file "+fname, lineNumber);
      }
      FileInputStream io = new FileInputStream(includeFile);
      CircuitParser p = new CircuitParser( io, includeFile, this );
      Variable_Context includeCon = p.read();
      io.close();

      if( !inMap.keySet().containsAll( includeCon.getInputs() ) ){
        String error = "The following input variables were not defined in the included file "+fname+": ";
        includeCon.getInputs().removeAll( inMap.keySet() );
        for( Iterator<String> it = includeCon.getInputs().iterator(); it.hasNext(); ){
          error += "\u005c""+it.next()+"\u005c"";
          if( it.hasNext() )
            error += ", ";
        }
        throw new CircuitDescriptionException(error, lineNumber);
      }

      if( ! includeCon.getOutputs().containsAll( outMap.keySet() ) ){
        String error = "The following output variables were not found in the included file "+fname+
        ": ";
        outMap.keySet().removeAll( includeCon.getOutputs() );
        for( Iterator<String> it = outMap.keySet().iterator(); it.hasNext(); ){
          error += "\u005c""+it.next()+"\u005c"";
          if( it.hasNext() )
            error += ", ";
        }
        throw new CircuitDescriptionException(error, lineNumber);
      }
      context.addContextWithMapping( includeCon, inMap, outMap, lineNumber );
    }

  final public void GarbledCircuit() throws ParseException, CircuitDescriptionException, FileNotFoundException, IOException {
  OperationNameResolver.initOperations();
    Version_Line();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT_MARK:
        InputLine();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      LineEnding();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_ENDING:
      case INPUT_MARK:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    OutputLine();
    LineEnding();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_ENDING:
      case OUTPUT_MARK:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_MARK:
        OutputLine();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      LineEnding();
    }
    Calculation();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_ENDING:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      LineEnding();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
      case START_PARTY:
      case END_PARTY:
      case IDENTIFIER:
        Calculation();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
    try{
      context.validate();
    } catch (CircuitDescriptionException e){
      log(e);
    }
  }

  final public void Version_Line() throws ParseException {
  int major = 1;
  int minor = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      jj_consume_token(VERSION);
      major = IntDigits();
      jj_consume_token(PERIOD);
      minor = IntDigits();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    major_version = major;
    minor_version = minor;
  }

  final public void LineEnding() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(LINE_ENDING);
    lineNumber++;
  }

  final public void InputLine() throws ParseException, CircuitDescriptionException {
  String id;
  int bitcount;
  int party;
    jj_consume_token(INPUT_MARK);
    id = Identifier();
    party = IntDigits();
    bitcount = IntDigits();
    if( party != Input_Variable.CLIENT && party != Input_Variable.SERVER ){
      {if (true) throw new CircuitDescriptionException("Cannot recognize party "+party,lineNumber);}
    }
    if( partyComp != Input_Variable.ALL ){
      party = partyComp;
    }
    Variable inputv = new Input_Variable(id, party, lineNumber, bitcount);
    putVar( inputv );
  }

  final public void OutputLine() throws ParseException {
  String outid;
  boolean isSigned = false;
    jj_consume_token(OUTPUT_MARK);
    outid = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED_MARK:
    case UNSIGNED_MARK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNED_MARK:
        jj_consume_token(SIGNED_MARK);
      isSigned = true;
        break;
      case UNSIGNED_MARK:
        jj_consume_token(UNSIGNED_MARK);
      isSigned = false;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    context.addOutput(outid, isSigned );
  }

  final public void Calculation() throws ParseException, CircuitDescriptionException, FileNotFoundException, IOException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      EvalTerm();
      break;
    case INCLUDE:
      Include();
      break;
    case START_PARTY:
    case END_PARTY:
      PartyChange();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PartyChange() throws ParseException, CircuitDescriptionException {
  int party;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_PARTY:
      jj_consume_token(START_PARTY);
      party = IntDigits();
      if( partyComp != Input_Variable.ALL && partyComp != party ){
        {if (true) throw new CircuitDescriptionException("Cannot begin a different local computation block inside of a local computation block",lineNumber);}
      }
      if( party != Input_Variable.CLIENT && party != Input_Variable.SERVER ){
        {if (true) throw new CircuitDescriptionException("Cannot recognize party "+party, lineNumber );}
      }
      partyComp = party;
      break;
    case END_PARTY:
      jj_consume_token(END_PARTY);
      party = IntDigits();
      if( included && partyComp != Input_Variable.ALL )
        {if (true) throw new CircuitDescriptionException("Cannot end local computation block in an included file which is inside a local computation block",lineNumber);}
      if( party != partyComp )
        {if (true) throw new CircuitDescriptionException("Cannot end local computation block when you are not in a local computation block");}
      partyComp = Input_Variable.ALL;
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Include() throws ParseException, CircuitDescriptionException, FileNotFoundException, IOException {
  Token tpath;
  Map<String,String> outMap;
  Map<String,Variable> inMap;
    jj_consume_token(INCLUDE);
    tpath = jj_consume_token(PATH);
    jj_consume_token(OUTPUT_MARK);
    outMap = Mapping();
    jj_consume_token(INPUT_MARK);
    inMap = InMapping();
    String path = tpath.image;
    path = path.substring( 1, path.length()-1 );
    includeFile( path, inMap, outMap );
  }

  final public void EvalTerm() throws ParseException, CircuitDescriptionException {
  String outid;
  String name;
  Variable temp;
  ArrayList<Variable> inputs = new ArrayList<Variable>();
    outid = Identifier();
    // output variable
      name = Identifier();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case INTEGER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      temp = VariableInput();
      inputs.add( temp );
    }
    OpDirections op = OperationNameResolver.get( name );
    if( op == null ){
      {if (true) throw new CircuitDescriptionException("Operation \u005c""+name+"\u005c" not recognized", lineNumber );}
    }
    Computed_Variable newv = new Computed_Variable
      ( outid, partyComp,lineNumber, inputs.toArray(new Variable[1]), op );
    putVar( newv );
  }

  final public Variable VariableInput() throws ParseException, CircuitDescriptionException {
  String id;
  BigInteger num;
  Variable var;
  int bits;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      // named variable
          id = Identifier();
      var = getVar(id);
      if( var == null ){
        {if (true) throw new CircuitDescriptionException("Variable \u005c""+id+"\u005c" not defined", lineNumber );}
      }
      {if (true) return var;}
      break;
    case INTEGER:
      // constant
          num = Digits();
      var = new Constant_Variable( num.toString(), lineNumber, num );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        bits = IntDigits();
        var = new Constant_Variable( num.toString(), lineNumber, num, bits );
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      {if (true) return var;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public BigInteger Digits() throws ParseException {
  Token t;
    t = jj_consume_token(INTEGER);
    try{
      {if (true) return new BigInteger( t.image );}
    } catch (NumberFormatException e){
      // will never happen
      {if (true) return BigInteger.ZERO;}
    }
    throw new Error("Missing return statement in function");
  }

  final public int IntDigits() throws ParseException {
  Token t;
    t = jj_consume_token(INTEGER);
    try{
      {if (true) return Integer.parseInt( t.image );}
    } catch( NumberFormatException e ){
      // will never happen
      {if (true) return 0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Map<String,String> Mapping() throws ParseException {
  String to;
  String from;
  Map<String,String> ans = new HashMap<String,String>();
    jj_consume_token(OPEN_PAREN);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      to = Identifier();
      jj_consume_token(COLON);
      from = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      ans.put( to, from );
    }
    jj_consume_token(CLOSE_PAREN);
    {if (true) return ans;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String,Variable> InMapping() throws ParseException, CircuitDescriptionException {
  String to;
  Variable from;
  Map<String,Variable> ans = new HashMap<String,Variable>();
    jj_consume_token(OPEN_PAREN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      to = Identifier();
      jj_consume_token(COLON);
      from = VariableInput();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      ans.put( to, from );
    }
    jj_consume_token(CLOSE_PAREN);
    {if (true) return ans;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CircuitParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x200480,0x200880,0x800,0x200080,0xb2000,0x4000,0x200000,0x9000,0x9000,0xb2000,0x30000,0x180000,0x10,0x180000,0x80000,0x40,0x80000,0x40,};
   }

  /** Constructor with InputStream. */
  public CircuitParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CircuitParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CircuitParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CircuitParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CircuitParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CircuitParser(CircuitParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CircuitParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  }
